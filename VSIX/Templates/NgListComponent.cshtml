@using PlatformCodeBuilder.Models.TemplateModels
@inherits RazorEngine.Templating.TemplateBase<PlatformCodeBuilder.Models.TemplateModels.EntityFileModel>
import { Component, Injector, OnInit, ViewChild } from '@@angular/core';
import { STColumn, STComponent, STData } from '@@delon/abc/st';
import { SFSchema } from '@@delon/form';
import { @(Model.Name)ServiceProxy, @(Model.Name)ListOutput } from '@@shared/service-proxies/service-proxies';
import { PagedListingComponentBase, PagedRequestDto, PagedResultDto } from '@@shared/common/paged-listing-component-base';
import { Observable } from 'rxjs';
import { finalize } from 'rxjs/operators';
import { CreateOrUpdate@(Model.Name)Component } from './create-or-update/@(Model.AngularEntityName).createorupdate.component';


@@Component({
  selector: 'app-@(Model.AngularEntityName)s',
  templateUrl: './@(Model.AngularEntityName).component.html'
})
/**
 * @(Model.Description)
 */
export class @(Model.Name)Component extends PagedListingComponentBase<@(Model.Name)ListOutput> implements OnInit {
    // 查询
    searchSchema: SFSchema = {
        properties: {
        @foreach (ClassProperty classProperty in Model.ClassPropertys)
        {
            if (classProperty.IsFilter)
            {
                if(classProperty.PropertyType == "decimal")
                {
            @:@(classProperty.FirstLowerName): { type: 'number', title: '@(classProperty.CnName)' },
                }
                else
                {
            @:@(classProperty.FirstLowerName): { type: '@(classProperty.PropertyType.ToLower())', title: '@(classProperty.CnName)' },
                }            
            }
        }
        },
    };

    searchInput: any = {
    @foreach (ClassProperty classProperty in Model.ClassPropertys)
    {
        if (classProperty.IsFilter)
        {
        @:@(classProperty.FirstLowerName): null,
        }
    }
    }

    @@ViewChild('st', { static: true }) st: STComponent;
    columns: STColumn[] = [
        { type: 'checkbox' },
    @foreach (ClassProperty classProperty in Model.ClassPropertys)
    {
        if (classProperty.IsShowInList)
        {
            if (classProperty.PropertyType == "DateTime")
            {
        @:{ title: '@(classProperty.CnName)', type: 'date', dateFormat: 'yyyy-MM-dd', index: '@(classProperty.FirstLowerName)' },
            }
            else if (classProperty.PropertyType == "bool")
            {
        @:{ title: '@(classProperty.CnName)', type: 'yn', index: '@(classProperty.FirstLowerName)' },
            }
            else
            {
        @:{ title: '@(classProperty.CnName)', index: '@(classProperty.FirstLowerName)' },
            }
        }
    }
        { title: '操作',
            buttons: [
                {
                    text: '编辑',
                    icon: 'edit',
                    type: 'modal',
                    modal: {
                        component: CreateOrUpdate@(Model.Name)Component,
                    },
                    params: (record: STData) => {
                        return { record };
                    },
                    click: (record, modal) => {
                        if (modal == true) {
                            this.refresh();
                        }
                    },
                },
                {
                    text: '删除',
                    icon: 'close',
                    type: 'del',
                    popTitle: '确定删除该@(Model.Description)',
                    click: (record: STData, modal?: any, instance?: STComponent) => {
                        this.delete(record, modal, instance);
                    },
                },
            ],
        },
    ];

    constructor(injector: Injector, private _@(Model.FirstLowerName)Service: @(Model.Name)ServiceProxy){
        super(injector);
    }

    ngOnInit(){
        super.ngOnInit();
    }

    protected list(request: PagedRequestDto): Observable<PagedResultDto> {
        return this._@(Model.FirstLowerName)Service
            .getPaged(request.maxResultCount, request.skipCount);
    }

    create() {
        this.modalHelper.createStatic(CreateOrUpdate@(Model.Name)Component, { i: { id: 0 } }).subscribe((res) => {
            if(res === true) {
                this.refresh();
            }
        });
    }

    delete(record: STData, modal?: any, instance?: STComponent) {
        this._@(Model.FirstLowerName)Service.delete(record.id).subscribe(() => {
            this.msgSrv.success('删除@(Model.Description)成功');
            this.refresh();
        });
    }

    doSearch(val: any) {
    @foreach (ClassProperty classProperty in Model.ClassPropertys)
    {
        if (classProperty.IsFilter)
        {
        @:this.@(classProperty.FirstLowerName) = val.@(classProperty.FirstLowerName);
        }
    }
        this.getDataPage(1);
    }
}