@using PlatformCodeBuilder.Models.TemplateModels
@inherits RazorEngine.Templating.TemplateBase<PlatformCodeBuilder.Models.TemplateModels.EntityFileModel>
import { Component, Injector, OnInit, Input, ViewChild } from '@@angular/core';
import { SFComponent, SFSchema, SFUISchema } from '@@delon/form';
import { ModalComponentBase } from '@@shared/common/modal-component-base';
import { CreateOrUpdate@(Model.Name)Dto, @(Model.Name)ServiceProxy } from '@@shared/service-proxies/service-proxies';
import { finalize } from 'rxjs/operators';


@@Component({
  selector: 'app-@(Model.AngularEntityName)s-createOrupdate',
  templateUrl: './@(Model.AngularEntityName).createorupdate.component.html'
})
/**
 * @(Model.Description)
 */
export class CreateOrUpdate@(Model.Name)Component extends ModalComponentBase implements OnInit {
    record: CreateOrUpdate@(Model.Name)Dto;
    saving = false;

    schema: SFSchema = {
        properties: {
@foreach (ClassProperty classProperty in Model.ClassPropertys)
{
    if (classProperty.IsCreateOrEdit)
    {
        if (classProperty.PropertyType == "bool")
        {
            @:@(classProperty.FirstLowerName): { type: 'boolean', title: '@(classProperty.CnName)' },
        }
        else if (classProperty.PropertyType == "int")
        {
            @:@(classProperty.FirstLowerName): { type: 'integer', title: '@(classProperty.CnName)' },
        }
        else if (classProperty.PropertyType == "decimal")
        {
            @:@(classProperty.FirstLowerName): { type: 'number', title: '@(classProperty.CnName)', multipleOf: 0.1 },
        }
        else if (classProperty.PropertyType == "string")
        {
            @:@(classProperty.FirstLowerName): { type: 'string', title: '@(classProperty.CnName)', maxLenght: @(classProperty.Lenght) },
        }
        else if (classProperty.PropertyType == "DateTime")
        {
            @:@(classProperty.FirstLowerName): { type: 'string', title: '@(classProperty.CnName)' },
        }
    }
}
        },
        required:[
@foreach (ClassProperty classProperty in Model.ClassPropertys)
{
    if (classProperty.IsRequired)
    {
        @:'@(classProperty.FirstLowerName)',
    }
}
        ],
    };
    ui: SFUISchema = {
        '*': { spanLabelFixed: 100, grid: { span: 24 } },
@foreach (ClassProperty classProperty in Model.ClassPropertys)
{
    if (classProperty.IsCreateOrEdit)
    {
        if (classProperty.PropertyType == "DateTime")
        {
        @:$@(classProperty.FirstLowerName): { widget: 'date' },
        }
    }
}
    };

    constructor(injector: Injector, private _@(Model.FirstLowerName)Service: @(Model.Name)ServiceProxy){
        super(injector);
    }

    ngOnInit(): void {
        if(this.record){
            this._@(Model.FirstLowerName)Service.getForEdit(this.record.id).subscribe((res) => {
                this.record = res;
            });
        } else {
            this.record = new CreateOrUpdate@(Model.Name)Dto();
        }
    }

    save(value: any){
        const input = CreateOrUpdate@(Model.Name)Dto.fromJS(value);

        this.saving = true;
        this._@(Model.FirstLowerName)Service
            .createOrUpdate(input)
            .pipe(finalize(() => {
                this.saving = false;
            }))
            .subscribe((res) => {
                this.msgSrv.success("保存成功");
                this.success();
            });
    }

    close() {
        super.close();
    }
}
