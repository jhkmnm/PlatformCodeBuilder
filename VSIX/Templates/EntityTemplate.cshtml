@using PlatformCodeBuilder.Models.TemplateModels
@inherits RazorEngine.Templating.TemplateBase<PlatformCodeBuilder.Models.TemplateModels.EntityFileModel>
using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Abp;
using Abp.Auditing;
using Abp.Domain.Entities;
using Abp.Domain.Entities.Auditing;

namespace @(Model.Namespace).@(Model.DirName)
{
    /// <summary>
    /// @(Model.Description)
    /// </summary>
    [Audited]
    [Table("@(Model.TableName)")]
    public class @(Model.Name) : FullAuditedAggregateRoot<Guid>, IMustHaveTenant
    {
        private @(Model.Name)()
        {
        }

        public @(Model.Name)(Guid id, @(Model.Parameters))
        {
            Id = id;
            SetProperties(@(Model.MethodParameters));
        }

        public bool SetProperties(@(Model.Parameters))
        {
            @foreach (ClassProperty classProperty in Model.ClassPropertys)
            {
                if (classProperty.PropertyType == "string" && !classProperty.IsNull)
                {                   
            @:Check.NotNullOrEmpty(@classProperty.FirstLowerName, "@classProperty.CnName");
                }
            }

            @foreach (ClassProperty classProperty in Model.ClassPropertys)
            {
            @:@classProperty.Name = @classProperty.FirstLowerName;
            }
            
            return true;
        }
        
        @if(Model.HasDetail)
        {
        @:public void AddUpdateDeleteItems(List<@(Model.DetailEntityName)EditDto> editDtos)
        @:{
            @:var dbIds = OrderItems.Select(s => s.Id).ToList();
            
            // 传入参数与数据库记录 交集 => 集合A
            @:var instersects = editDtos.Select(s => s.Id)
                @:.Intersect(dbIds)
                @:.ToList();
            @:
            // 数据库记录 与 集合A => 集合B
            @:var excepts = dbIds.Except(instersects).ToList();
            @:
            // 删除集合B
            @:RemoveItems(excepts);
            @:
            // 剩余的全部是新增或修改
            @:foreach (var editDto in editDtos)
            @:{
                @:AddOrUpdateItems(editDto);
            @:}
        @:}
        @:
        @:/// <summary>
        @:/// 删除指定明细
        @:/// </summary>
        @:/// <param name="itemIds"></param>
        @:private void RemoveItems(IReadOnlyCollection<long> itemIds)
        @:{
            @:if(null == itemIds || itemIds.Count == 0) return;

            @:foreach (var itemId in itemIds)
            @:{
                @:var items = OrderItems
                    @:.Where(w => w.Id == itemId)
                    @:.ToList();
                @:items.ForEach(f => OrderItems.Remove(f));
            @:}
        @:}
        @:
        @:private void AddOrUpdateItems(@(Model.DetailEntityName)EditDto editDto)
        @:{
            @:Check.NotNull(editDto, nameof(editDto));
            @:var item = OrderItems.FirstOrDefault(w => editDto.Id != 0 && w.Id == editDto.Id);

            @:if (null == item)
            @:{
                @:item = new @(Model.DetailEntityName)(Id);
                @:OrderItems.Add(item);
            @:}
            @:else
            @:{
                @:item.SetProperties(Id);
            @:}
        @:}
        }

        #region 表字段
        public int TenantId { get; set; }

        @if (Model.HasParent)
        {
        @:[ForeignKey("@(Model.ParentEntityName)Id")]
        @:public virtual @(Model.ParentEntityName) @(Model.ParentEntityName) { get; protected set; }
        }

        @foreach (ClassProperty classProperty in Model.ClassPropertys)
        {
        @:/// <summary>
        @:/// @classProperty.CnName
        @:/// </summary>
        @:[Description("@classProperty.CnName")]
        @:@if (classProperty.ClassAttributes != null && classProperty.ClassAttributes.Count > 0)
        {
                @foreach (var classAttribute in classProperty.ClassAttributes)
            {
        @:@classAttribute.NameValue
            }
        }
        @:public @classProperty.PropertyType @classProperty.Name { get; protected set; }
        }

        #endregion
    }
}